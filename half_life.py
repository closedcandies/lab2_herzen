import math

# Основная функция для вычисления количества вещества
def radioactive_decay(N0, t, half_life):
    """Вычисляет количество радиоактивного вещества в момент времени t.

    Параметры:
    N0 - начальное количество вещества
    t - время, прошедшее с начала наблюдения
    half_life - период полураспада вещества

    Возвращает:
    Количество вещества в момент времени t
    """
    return N0 * (0.5 ** (t / half_life))

# Каррирование - создаем специализированную функцию с предустановленным half_life
def create_decay_function(half_life):
    """Создает функцию для вычисления количества радиоактивного вещества с заданным периодом полураспада.

    Параметры:
    half_life - период полураспада вещества

    Возвращает:
    Функцию, которая принимает начальное количество вещества и время t
    """
    return lambda N0, t: radioactive_decay(N0, t, half_life)

# Словарь с периодами полураспада для различных изотопов (в годах)
half_lives = {
    "Uranium-238": 4.468e9,  # Уран-238 (в миллиардах лет)
    "Carbon-14": 5730,       # Углерод-14 (в годах)
    "Iodine-131": 8.02,      # Йод-131 (в днях)
    "Plutonium-239": 24100   # Плутоний-239 (в годах)
}

# Создаем каррированные функции для каждого изотопа
decay_functions = {isotope: create_decay_function(half_life) for isotope, half_life in half_lives.items()}

# Задаем начальное количество вещества N0 и время t
N0 = 1000  # Начальное количество вещества (например, граммы)
times = [10, 100, 1000, 10000]  # Разные значения времени (в годах, для примера)

# Демонстрация вычислений для каждого изотопа
for isotope, decay_function in decay_functions.items():
    print(f"Изотоп: {isotope}")
    for t in times:
        remaining_amount = decay_function(N0, t)
        print(f"  Остаток вещества через {t} лет: {remaining_amount:.2f} грамм")
    print()
